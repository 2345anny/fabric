---
###############################################################################
#
#    CLI section
#
###############################################################################
cli:

    # The address that the cli process will use for callbacks from chainlets
    address: 0.0.0.0:30304



###############################################################################
#
#    REST section
#
###############################################################################
rest:

    # The address that the REST service will listen on for incoming requests.
    address: 0.0.0.0:5000



###############################################################################
#
#    Peer section
#
###############################################################################
peer:

    # Peeer Version following version semantics as described here http://semver.org/
    # The Peer supplies this version in communications with other Peers
    version:  0.1.0

    # The Peer id is used for identifying this Peer instance.
    id: jdoe

    # The privateKey to be used by this peer
    privateKey: 794ef087680e2494fa4918fd8fb80fb284b50b57d321a31423fe42b9ccf6216047cea0b66fe8365a8e3f2a8140c6866cc45852e63124668bee1daa9c97da0c2a

    # The networkId allows for logical seperation of networks
    # networkId: dev
    # networkId: test
    networkId: dev

    Dockerfile:  |
        from golang:1.5.1
        # Install RocksDB
        RUN cd /opt  && git clone --branch v3.13.1 --single-branch --depth 1 https://github.com/facebook/rocksdb.git && cd rocksdb
        WORKDIR /opt/rocksdb
        RUN make shared_lib
        ENV LD_LIBRARY_PATH=/opt/rocksdb:$LD_LIBRARY_PATH
        RUN apt-get update && apt-get install -y \
            libsnappy-dev      \
            zlib1g-dev         \
            libbz2-dev
        RUN CGO_CFLAGS="-I/opt/rocksdb/include" CGO_LDFLAGS="-L/opt/rocksdb -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy" go get github.com/tecbot/gorocksdb
        # Copy GOPATH src and install Peer
        COPY src $GOPATH/src
        WORKDIR $GOPATH/bin
        RUN go install github.com/openblockchain/obc-peer && cp $GOPATH/src/github.com/openblockchain/obc-peer/openchain.yaml $GOPATH/bin


    address: 0.0.0.0:30303

    # Logging settings
    logging:
        # Logging level, can be one of [error|warning|info|debug]
        # One of: CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG
        level: DEBUG

    # Peer port to accept connections on
    port:    30303
    # Peer's setting for GOMAXPROCS
    gomaxprocs: 2
    workers: 2

    #Validator configuration block
    consensus:
        validator:
            enabled: false
        leader:
            address: 

    # TLS Settings for p2p communications
    tls:
        enabled:  false
        cert:
            file: testdata/server1.pem
        key:
            file: testdata/server1.key
        # The server name use to verify the hostname returned by TLS handshake
        server-host-override:

    # Peer discovery settings.  Controls how this peer discovers other peers
    discovery:

        # The root nodes are used for bootstrapping purposes, and generally supplied through ENV variables
        rootnode:

        ## leaving this in for example of sub map entry
        # testNodes:
        #    - node   : 1
        #      ip     : 127.0.0.1
        #      port   : 30303
        #    - node   : 2
        #      ip     : 127.0.0.1
        #      port   : 30303

        # Should the discovered nodes and their reputations
        # be stored in DB and persisted between restarts
        persist:    true

        # if peer discovery is off
        # the peer window will show
        # only what retrieved by active
        # peer [true/false]
        enabled:    true

        # number of workers that
        # tastes the peers for being
        # online [1..10]
        workers: 8

        # the period in seconds with which the discovery
        # tries to reconnect to successful nodes
        # 0 means the nodes are not reconnected
        touchPeriod: 600

        # the maximum nuber of nodes to reconnect to
        # -1 for unlimited
        touchMaxNodes: 100

    # Peer's DB settings
    db:
        # location on file system
        path: /var/openchain/db



###############################################################################
#
#    VM section
#
###############################################################################
vm:

    # Endpoint of the vm management system.  For docker can be one of the following in general
    # unix:///var/run/docker.sock
    # http://localhost:4243
    endpoint: unix:///var/run/docker.sock


###############################################################################
#
#    Chainlet section
#
###############################################################################
chainlet:

    golang:

        # This is the basis for the Golang Dockerfile.  Additional commands will be appended depedendent upon the chainlet specification.
        Dockerfile:  |
            from golang:1.5.1
            COPY src $GOPATH/src
            WORKDIR $GOPATH


# Below left in for examples of YAML usage
receipt:     Oz-Ware Purchase Invoice
date:        2012-08-06

bill-to:  &id001
    street: |
            123 Tornado Alley
            Suite 16
    city:   East Centerville
    state:  KS

ship-to:  *id001

specialDelivery:  >
    Follow the Yellow Brick
    Road to the Emerald City.
    Pay no attention to the
    man behind the curtain.
...
