/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

package pbft;

import "google/protobuf/timestamp.proto";

// Request is the message passed by the peer to the validator.
// The peer receives a client request to deploy or invoke a chaincode, assigns
// it a unique ID, then packages into a "Request" message that is passed along
// to one of its connected validators.
message Request {
    uint64 id = 1;
    bytes payload = 2;
    google.protobuf.Timestamp timestamp = 3;
}

// Phase is the message type shared among validators during the consensus phase.
// The "sequenceNumber" field is set by the leader when setting a "PRE_PREPARE".
// The "payload" field is expected to contain an array of hashes corresponding
// to received "Request" messages  when the Type is "PRE_PREPARE". When the Type
// is "PREPARE_RESULT" or "COMMIT_RESULT", "payload" should carry the candidate
// global hash.
message Phase {
    enum Type {
        UNDEFINED = 0;
        PRE_PREPARE = 1;
        PREPARE = 2;
        COMMIT = 3;
        PREPARE_RESULT = 4;
        COMMIT_RESULT = 5;
    }
    Type type = 1;
    uint64 sequenceNumber = 2;
    bytes payload = 3;
    google.protobuf.Timestamp timestamp = 4;
}

// RequestHashes contains the hashes of the "Request" messages that the leader
// will package in a consensus round. Marshalling such a message (proto.Marshal)
// should generate the "payload" of a PRE_PREPARE message (see "Phase" message).
message RequestHashes {
    repeated string hashes = 1;
}

// Requests will be used temporarily instead of RequestHashes. In order to use
// "RequestHashes" a datastore is needed on every validator that maps incoming
// "Request" messages to their hashes. Until this structure is implemented, the
// leader should proto.Marshal() a "Requests" message for a PRE_PREPARE
// message's "payload".
message Requests {
    repeated Requests requests = 1;
}
