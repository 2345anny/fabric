/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

package pbft;

// PBFT is the common message type used to unmarshal the payload of an
// OpenchainMessage_CONSENSUS message.
//
// TODO: Define the contents when the type is REQUEST.
//
// When it's a "PRE_PREPARE", the "ID" field is set by the leader. The "payload"
// field is expected to contain an array of hashes corresponding to received
// "Request" messages. When the Type is "PREPARE_RESULT" or "COMMIT_RESULT",
// "payload" should carry the candidate global hash.
message PBFT {
    enum Type {
        UNDEFINED = 0;
        REQUEST = 1;
        PRE_PREPARE = 2;
        PREPARE = 3;
        COMMIT = 4;
        PREPARE_RESULT = 5;
        COMMIT_RESULT = 6;
    }
    Type type = 1;
    string ID = 2;
    bytes payload = 3;
}

// Request is the message passed by the peer to the validator.
// The peer receives a client request to deploy or invoke a chaincode, assigns
// it a unique ID, then packages into a "Request" message that is passed along
// to one of its connected validators.
message Request {
    string ID = 1;
    bytes payload = 2;
}

// RequestHashes contains the hashes of the "Request" messages that the leader
// will package in a consensus round. Marshalling such a message (proto.Marshal)
// should generate the "payload" of a PRE_PREPARE message (see "Phase" message).
message RequestHashes {
    repeated string hashes = 1;
}

// Requests will be used temporarily instead of RequestHashes. In order to use
// "RequestHashes", a datastore is needed on every validator that maps incoming
// "Request" messages to their hashes. Until this structure is implemented, the
// leader should proto.Marshal() a "Requests" message for a PRE_PREPARE
// message's "payload".
message Requests {
    repeated Request requests = 1;
}
