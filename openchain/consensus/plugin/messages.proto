/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

package plugin;

// All message definitions here are up to the plugin developer.

// Guidelines: Your `HandleMessage(receiver, msg)` will receive a message whose
// data type is `pb.OpenchainMessage` and its message type is
// `pb.OpenchainMessage_CONSENSUS`. Its payload is opaque; for now it's just a
// byte array. You need to unmarshal it, and in order to unmarhsal it you need
// to define a message template. Define a template that'll work with all of the
// messages that you will be exchanging during the consensus phase, cause you'll
// so that the receiver can unmarshal them using the same template and read
// their content.

// The following is a template that we're adopting for PBFT.

// - The `ID` for an `Unpack_PRE_PREPARE` message is set by the leader.
// - The `payload` for an `Unpack_REQUEST` message is a marshalled `Request`
// message (see definition below). For an `Unpack_PRE_PREPARE`, it is a
// marshalled array of hashes, corresponding to received `Unpack_REQUEST`
// messages (TODO).
message Unpack {

    enum Type {
        UNDEFINED = 0;
        REQUEST = 1;
        PRE_PREPARE = 2;
        PREPARE = 3;
        COMMIT = 4;
        PREPARE_RESULT = 5;
        COMMIT_RESULT = 6;
    }

    Type type = 1;
    string ID = 2;
    bytes payload = 3;
}

// Request is the message passed by a peer to a validating peer. The peer
// receives a client request to deploy or invoke a chaincode, assigns it a
// unique ID, then packages into a "Request" message that is passed along
// to one of its connected validating peers. Marshalling such a message
// (proto.Marshall) should generate the `payload` of an `Unpack_REQUEST` message.
message Request {

    string ID = 1;
    bytes payload = 2;
}

// RequestHashes contains the hashes of the `Unpack_REQUEST` messages that the
// leader will package in a consensus round. Marshalling such a message
// (proto.Marshal) should generate the `payload` of an `Unpack_PRE_PREPARE`
// message.
message RequestHashes {

    repeated string hashes = 1;
}

// TODO: Define messages for PrePrepare, PrepareResult and CommitResult.
