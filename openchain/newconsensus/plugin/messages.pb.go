// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package plugin is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	Unpack
	Request
	RequestHashes
*/
package plugin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Unpack_Type int32

const (
	Unpack_UNDEFINED      Unpack_Type = 0
	Unpack_REQUEST        Unpack_Type = 1
	Unpack_PRE_PREPARE    Unpack_Type = 2
	Unpack_PREPARE        Unpack_Type = 3
	Unpack_COMMIT         Unpack_Type = 4
	Unpack_PREPARE_RESULT Unpack_Type = 5
	Unpack_COMMIT_RESULT  Unpack_Type = 6
)

var Unpack_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "REQUEST",
	2: "PRE_PREPARE",
	3: "PREPARE",
	4: "COMMIT",
	5: "PREPARE_RESULT",
	6: "COMMIT_RESULT",
}
var Unpack_Type_value = map[string]int32{
	"UNDEFINED":      0,
	"REQUEST":        1,
	"PRE_PREPARE":    2,
	"PREPARE":        3,
	"COMMIT":         4,
	"PREPARE_RESULT": 5,
	"COMMIT_RESULT":  6,
}

func (x Unpack_Type) String() string {
	return proto.EnumName(Unpack_Type_name, int32(x))
}

// - The `ID` for an `Unpack_PRE_PREPARE` message is set by the leader.
// - The `payload` for an `Unpack_REQUEST` message is a marshalled `Request`
// message (see definition below). For an `Unpack_PRE_PREPARE`, it is a
// marshalled array of hashes, corresponding to received `Unpack_REQUEST`
// messages (TODO).
type Unpack struct {
	Type    Unpack_Type `protobuf:"varint,1,opt,name=type,enum=plugin.Unpack_Type" json:"type,omitempty"`
	ID      string      `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Payload []byte      `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Unpack) Reset()         { *m = Unpack{} }
func (m *Unpack) String() string { return proto.CompactTextString(m) }
func (*Unpack) ProtoMessage()    {}

// Request is the message passed by a peer to a validating peer. The peer
// receives a client request to deploy or invoke a chaincode, assigns it a
// unique ID, then packages into a "Request" message that is passed along
// to one of its connected validating peers. Marshalling such a message
// (proto.Marshall) should generate the `payload` of an `Unpack_REQUEST` message.
type Request struct {
	ID      string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

// RequestHashes contains the hashes of the `Unpack_REQUEST` messages that the
// leader will package in a consensus round. Marshalling such a message
// (proto.Marshal) should generate the `payload` of an `Unpack_PRE_PREPARE`
// message.
type RequestHashes struct {
	Hashes []string `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
}

func (m *RequestHashes) Reset()         { *m = RequestHashes{} }
func (m *RequestHashes) String() string { return proto.CompactTextString(m) }
func (*RequestHashes) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("plugin.Unpack_Type", Unpack_Type_name, Unpack_Type_value)
}
