/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

package protos;

import "google/protobuf/timestamp.proto";

// Carries the URL where the chaincode resides and the chaincode version.
// TODO: Merge with ChainletIDentifier.
message ChainletID {

    string url = 1;
    string version = 2;

}

// Carries the chaincode function and its arguments.
message ChainletMessage {

    string function = 1;
    repeated string args  = 2;

}

// Carries the chaincode specification. This is the actual metadata required for
// defining a chaincode.
message ChainletSpec {

    enum Type {
        UNDEFINED = 0;
        GOLANG = 1;
        NODE = 2;
    }

    Type type = 1;
    ChainletID chainletID = 2;
    ChainletMessage ctorMsg = 3;

}

// Specify the deployment of a chaincode.
// TODO: Define `codePackage`.
message ChainletDeploymentSpec {

    ChainletSpec chainletSpec = 1;
    // Controls when the chaincode becomes executable.
    google.protobuf.Timestamp effectiveDate = 2;
    bytes codePackage = 3;

}

// TODO: Merge this with ChainletID.
message ChainletIdentifier {
    // URL for accessing the Chainlet, eg. https://github.com/user/SampleContract
    string Url = 1;
}


// Used by the peer to identify the requesting chaincode and allows for proper
// access to state.
message ChainletRequestContext {
    ChainletIdentifier Id = 1;
}

// Provided by the peer to the chaincode to identify the requesting chaincode
// and allow for proper access to state.
message ChainletExecutionContext {

    ChainletIdentifier ChainletId = 1;
    google.protobuf.Timestamp Timestamp = 2;

}

// Interface that provides support to chaincode execution. ChainletContext
// provides the context necessary for the server to respond appropriately.
service ChainletSupport {

    // Return the datetime.
    rpc GetExecutionContext(ChainletRequestContext) returns (ChainletExecutionContext) {}

}
